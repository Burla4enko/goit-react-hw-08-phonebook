{"version":3,"file":"static/js/536.b750c53d.chunk.js","mappings":"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","sources":["redux/contacts-and-filtering/selectors.js","components/ContactForm/ContactForm.styled.js","utils/validationSchema.js","components/ContactForm/ContactForm.js","utils/isInContact.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.js"],"sourcesContent":["export const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const ContactFormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  padding: 10px;\n  margin: 0 auto;\n  position: relative;\n  background-color: rgb(28, 30, 33);\n  border-radius: 8px;\n\n  :before {\n    display: block;\n    margin-left: 20px;\n    position: relative;\n    top: 40px;\n    height: 2px;\n    background-color: rgb(52, 56, 61);\n    content: '';\n\n    z-index: 1;\n  }\n`;\n\nexport const Label = styled.label`\n  position: absolute;\n  font-size: 0;\n`;\n\nexport const Input = styled(Field)`\n  position: relative;\n  display: block;\n  width: 280px;\n  height: 40px;\n  border: 0;\n  outline: 0;\n  top: -2px;\n  padding: 0 30px 0 20px;\n  font-weight: 700;\n  background-color: rgb(28, 30, 33);\n  box-shadow: inset -100px -100px 0 rgb(28, 30, 33);\n  color: gray;\n  transition: color 0.3s ease;\n\n  :focus {\n    color: rgb(0, 126, 165);\n  }\n`;\n\nexport const MessageSpan = styled(ErrorMessage)`\n  position: absolute;\n  top: 100px;\n  left: -10px;\n  width: 300px;\n  padding: 8px;\n\n  background-color: rgb(28, 30, 33);\n  color: #ff3038;\n  border-radius: 8px;\n  font-size: 16px;\n  font-weight: 500;\n  line-height: 1.25;\n`;\n\nexport const ContactFormButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  width: 52px;\n  height: 52px;\n  color: gray;\n  border-radius: 50px;\n  outline: 0;\n  z-index: 2;\n  top: 24px;\n  right: -24px;\n  border: 6px solid rgb(52, 56, 61);\n  background-color: rgb(28, 30, 33);\n  cursor: pointer;\n  transition: box-shadow 0.3s ease, border-color 0.3s ease;\n\n  :hover,\n  :focus {\n    color: rgb(0, 126, 165);\n    box-shadow: 0 0 10px rgb(0, 126, 165);\n    border-color: rgb(0, 126, 165);\n  }\n\n  svg {\n    color: currentColor;\n    transition: color 0.3s ease;\n  }\n`;\n","import * as yup from 'yup';\n\nconst NUMBER_PTTRN =\n  /\\+?\\d{1,4}?[-\\d\\s]?\\(?\\d{1,3}?\\)?[-\\d\\s]?\\d{1,4}[-\\d\\s]?\\d{1,4}[-\\d\\s]?\\d{1,9}/;\nconst errorMsgNumb =\n  'Phone number must be at least 5 digits and can contain spaces, dashes, parentheses and can start with +';\nconst NAME_PTTRN = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\nconst errorMsgName = `Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`;\nexport const validationScheme = yup.object().shape({\n  name: yup.string().min(3).matches(NAME_PTTRN, errorMsgName).required(),\n  number: yup.string().matches(NUMBER_PTTRN, errorMsgNumb).required(),\n});\n","import { Formik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { FaUserPlus } from 'react-icons/fa';\nimport { addContact } from 'redux/contacts-and-filtering/operations';\nimport {\n  selectContacts,\n  selectIsLoading,\n} from 'redux/contacts-and-filtering/selectors';\nimport {\n  ContactFormStyled,\n  Input,\n  MessageSpan,\n  Label,\n  ContactFormButton,\n} from './ContactForm.styled';\nimport { validationScheme } from 'utils/validationSchema';\nimport { isInContact } from 'utils/isInContact';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  const initialValues = { name: '', number: '' };\n\n  const onSubmit = ({ name, number }, { resetForm }) => {\n    if (isInContact(contacts, name).length > 0) {\n      return toast.error(`${name} is already in the contact list`);\n    }\n    try {\n      dispatch(addContact({ name, number }));\n      toast.success(`New contact ${name} successfully added`);\n      resetForm();\n    } catch (e) {\n      return e.message;\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationScheme}\n    >\n      <ContactFormStyled autoComplete=\"off\">\n        <Input type=\"text\" name=\"name\" placeholder=\"name\" />\n        <Label htmlFor=\"name\">\n          <MessageSpan name=\"name\" component={'span'} />\n        </Label>\n\n        <Input type=\"tel\" name=\"number\" placeholder=\"number\" />\n        <Label htmlFor=\"number\">\n          <MessageSpan name=\"number\" component={'span'} />\n        </Label>\n\n        <ContactFormButton type=\"submit\" disabled={isLoading}>\n          <FaUserPlus size=\"24\" />\n        </ContactFormButton>\n      </ContactFormStyled>\n    </Formik>\n  );\n};\n","export const isInContact = (contacts, newName) => {\n  return contacts.filter(\n    ({ name }) => name.toLowerCase() === newName.toLowerCase().trim()\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactListUl = styled.ul`\n  margin-top: 20px;\n  padding-left: 10px;\n`;\n\nexport const ContactListLi = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 10px;\n  padding: 8px;\n\n  border: 2px solid gray;\n  border-radius: 8px;\n\n  font-weight: 500;\n\n  span {\n    text-transform: capitalize;\n    display: inline-block;\n    margin-right: 10px;\n  }\n\n  button {\n    margin-left: 10px;\n  }\n`;\n\nexport const ContactListButton = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 40px;\n  color: gray;\n  border-radius: 8px;\n  outline: 0;\n  z-index: 2;\n  top: 44px;\n  right: -24px;\n  border: 3px solid rgb(52, 56, 61);\n  background-color: rgb(28, 30, 33);\n\n  cursor: pointer;\n  transition: box-shadow 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n\n  :hover,\n  :focus {\n    color: rgb(0, 126, 165);\n    box-shadow: 0 0 10px rgb(0, 126, 165);\n    border-color: rgb(0, 126, 165);\n  }\n\n  svg {\n    color: currentColor;\n  }\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FaUserMinus } from 'react-icons/fa';\nimport {\n  ContactListButton,\n  ContactListLi,\n  ContactListUl,\n} from './ContactList.styled';\nimport {\n  selectContacts,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contacts-and-filtering/selectors';\nimport {\n  deleteContact,\n  fetchContacts,\n} from 'redux/contacts-and-filtering/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const filter = useSelector(selectFilter);\n\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase().trim())\n  );\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactListUl>\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <ContactListLi key={id}>\n            <div>\n              <span>{name}:</span>\n              <span>{number}</span>\n            </div>\n            <ContactListButton\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(id))}\n              disabled={isLoading}\n            >\n              <FaUserMinus size=\"32\" />\n            </ContactListButton>\n          </ContactListLi>\n        );\n      })}\n    </ContactListUl>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterLabel = styled.label`\nposition:relative;\n  color: gray;\n  border-radius: 50%;\n  \n  :hover {\n    color: rgb(0, 126, 165);\n    box-shadow: 0 0 10px rgb(0, 126, 165);\n    border-color: rgb(0, 126, 165);\n  }\n\n  svg {\n    position absolute;\n    left: 240px;\n    top: 50%;\n    transform: translateY(-50%);\n    color: currentColor;\n    transition: color 0.3s ease;\n  }\n`;\n\nexport const FilterInput = styled.input`\n  display: block;\n  width: 280px;\n  height: 40px;\n  padding-left: 20px;\n  padding-right: 40px;\n\n  border: 0;\n  border-radius: 8px;\n  outline: 0;\n  background-color: rgb(28, 30, 33);\n  box-shadow: inset -100px -100px 0 rgb(28, 30, 33);\n  color: gray;\n  font-weight: 700;\n\n  transition: color 0.3s ease;\n\n  :focus {\n    color: rgb(0, 126, 165);\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { BiSearchAlt } from 'react-icons/bi';\nimport { changeFilter } from 'redux/contacts-and-filtering/filterSlice';\nimport {\n  selectContacts,\n  selectFilter,\n} from 'redux/contacts-and-filtering/selectors';\nimport { FilterInput, FilterLabel } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  return (\n    <>\n      {contacts.length > 0 && (\n        <FilterLabel>\n          <BiSearchAlt size=\"32\" />\n          <FilterInput\n            type=\"text\"\n            name=\"filter\"\n            value={filter}\n            onChange={e => dispatch(changeFilter(e.target.value))}\n          />\n        </FilterLabel>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactSectionWrapper = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 0 16px;\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: 30px;\n`;\n\nexport const ContactsTitle = styled.h2`\n  font-size: 32px;\n  margin-bottom: 10px;\n`;\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/auth/authSelectors';\nimport { ContactSectionWrapper, ContactsTitle } from './Contacts.styled';\n\nexport default function Contacts() {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  return (\n    isLoggedIn && (\n      <ContactSectionWrapper>\n        <div>\n          <h1>Phonebook</h1>\n          <ContactForm />\n        </div>\n        <div>\n          <ContactsTitle>Contacts</ContactsTitle>\n          <Filter />\n          <ContactList />\n        </div>\n      </ContactSectionWrapper>\n    )\n  );\n}\n"],"names":["selectFilter","state","filter","selectContacts","contacts","items","selectIsLoading","isLoading","ContactFormStyled","styled","Form","Label","Input","Field","MessageSpan","ErrorMessage","ContactFormButton","validationScheme","yup","shape","name","min","matches","required","number","ContactForm","useSelector","dispatch","useDispatch","initialValues","onSubmit","resetForm","newName","toLowerCase","trim","isInContact","length","toast","addContact","e","message","validationSchema","autoComplete","type","placeholder","htmlFor","component","disabled","size","ContactListUl","ContactListLi","ContactListButton","ContactList","visibleContacts","contact","includes","useEffect","fetchContacts","map","id","onClick","deleteContact","FilterLabel","FilterInput","Filter","value","onChange","changeFilter","target","ContactSectionWrapper","ContactsTitle","Contacts","selectIsLoggedIn"],"sourceRoot":""}